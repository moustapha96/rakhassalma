security:
  # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
  password_hashers:
    Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: "auto"
  # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
  providers:
    # used to reload user from session & other features (e.g. switch_user)
    app_user_provider:
      entity:
        class: App\Entity\User
        property: email

    chain_provider:
      chain:
        providers: [phone_provider, email_provider]

    phone_provider:
      entity:
        class: App\Entity\User
        property: telephone

    email_provider:
      entity:
        class: App\Entity\User
        property: email

  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false
    api:
      pattern: ^/api/
      stateless: true
      provider: chain_provider
      jwt: ~

    main:
      lazy: true
      provider: chain_provider
      json_login:
        check_path: /authentication_token
        success_handler: lexik_jwt_authentication.handler.authentication_success
        failure_handler: lexik_jwt_authentication.handler.authentication_failure
      custom_authenticator: App\Security\AppAuthenticationAuthenticator
      logout:
        path: app_logout
        # where to redirect after logout
        # target: app_any_route

      remember_me:
        secret: "%kernel.secret%"
        lifetime: 604800
        path: /
        always_remember_me: true
      # activate different ways to authenticate
      # https://symfony.com/doc/current/security.html#the-firewall

      # https://symfony.com/doc/current/security/impersonating_user.html
      # switch_user: true

  # Easy way to control access for large sections of your site
  # Note: Only the *first* access control that matches will be used

  access_control:
    - { path: ^/api, roles: PUBLIC_ACCESS }
    - { path: ^/api/docs, roles: PUBLIC_ACCESS } # Allows accessing API documentations and Swagger UI
    - { path: ^/admin, roles: ROLE_ADMIN }
    - { path: ^/dashboard, roles: ROLE_USER }
    - { path: ^/, roles: PUBLIC_ACCESS }

  role_hierarchy:
    ROLE_SUPER_ADMIN: ["ROLE_ADMIN", "ROLE_ALLOWED_TO_SWITCH"]
    ROLE_ADMIN: ROLE_ADMIN
    ROLE_USER: ROLE_USER

when@test:
  security:
    password_hashers:
      # By default, password hashers are resource intensive and take time. This is
      # important to generate secure password hashes. In tests however, secure hashes
      # are not important, waste resources and increase test times. The following
      # reduces the work factor to the lowest possible values.
      Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
        algorithm: auto
        cost: 4 # Lowest possible value for bcrypt
        time_cost: 3 # Lowest possible value for argon
        memory_cost: 10 # Lowest possible value for argon
